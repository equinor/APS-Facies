<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
	vc:minVersion="1.1">



	<!--
  **********************************
  Custom base types (reusable types)
  **********************************
  -->
	<xs:simpleType name="NonEmptyString">
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="PositiveFloat">
		<xs:restriction base="xs:decimal">
			<xs:minExclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="FloatDegrees90">
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="90"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="FloatDegrees360">
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="360"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="IntegerOneOrZero">
		<xs:restriction base="xs:integer">
			<xs:enumeration value="1"/>
			<xs:enumeration value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="IntegerOneOrMinusOne">
		<xs:restriction base="xs:integer">
			<xs:enumeration value="1"/>
			<xs:enumeration value="-1"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="IntegerBetween100And10000Inclusive">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="100"/>
			<xs:maxInclusive value="10000"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="OriginType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Relative"/>
			<xs:enumeration value="Absolute"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="FloatBetweenZeroAndOneInclusive">
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="1"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="YesNo">
		<xs:restriction base="xs:string">
			<xs:enumeration value="yes" />
			<xs:enumeration value="no" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="VH">
		<xs:restriction base="xs:string">
			<xs:enumeration value="V" />
			<xs:enumeration value="H" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="PrintInfoType">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="4"/>
		</xs:restriction>
	</xs:simpleType>



	<!--
  *****************
  Content Model
  *****************
  -->


	<xs:element name="APSModel" type="APSModelType"/>

    <!--
    GaussFieldJobNames
    -->
    <xs:complexType name="JobType">
        <xs:sequence>
            <xs:element type="xs:string" name="GFParam" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name" use="optional"/>
    </xs:complexType>
    <xs:complexType name="GaussFieldJobNamesType">
        <xs:sequence>
        <xs:element type="JobType" name="Job" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!--
    Preview
    -->
	<xs:complexType name="PreviewType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:float" name="crossSectionRelativePos"/>
                <xs:attribute type="xs:string" name="crossSectionType"/>
                <xs:attribute type="xs:byte" name="regionNumber"/>
                <xs:attribute type="xs:float" name="scale"/>
                <xs:attribute type="xs:byte" name="zoneNumber"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <!--
    SelectedZonesAndRegions
    -->
    <xs:complexType name="SelectedZoneWithRegionsType">
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute type="xs:byte" name="zone" use="optional"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="SelectedZonesAndRegionsType">
      <xs:sequence>
        <xs:element type="SelectedZoneWithRegionsType" name="SelectedZoneWithRegions" maxOccurs="unbounded" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>

    <!--
    Optimization
    -->
	<xs:complexType name="OptimizationType">
		<xs:sequence>
			<!--comment: Both elements in the sequence are optional. Does it make sense to have an element Optimization at all if these are not set?
	  Note that using the keyword is optional itself. A better approach would possibly be that if the keyword/element Optimization is present, the two elements in
	  the sequence must also be set. (minOccurs and maxOccurs set to 1) Refer to document on teamsite.-->
			<xs:element type="xs:boolean" name="UseMemoization" default="1" minOccurs="0"/>
			<xs:element type="IntegerBetween100And10000Inclusive" name="MemoizationResolution" default="100" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="FaciesCodeType">
		<xs:sequence>
			<xs:element type="xs:positiveInteger" name="Code"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name" use="required"/>
	</xs:complexType>

	<xs:complexType name="MainFaciesTableType">
		<xs:sequence>
			<!--The MainFaciesTableType does not really have any meaning if we don't have at least two facies, right?-->
			<xs:element type="FaciesCodeType" name="Facies" maxOccurs="unbounded" minOccurs="2"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="FaciesProbType">
		<xs:sequence>
			<!-- this is porly described/badly designed in the spesification ("APS model file documentation.docx"). The documentation describes the content model as follows:
	  "It(the element) specifies either a float number or a text word containing the name of a 3D parameter for the facies probability for the facies it belongs to."
	  From the examples this is correct. But an element should have only one possible datatype. To manage both floats and strings we have to accept string
	  as the datatype allthough that means we loose validation options we could have had had there been a selection of a string element or a float element
	  with different names under FaciesProbForModel. (EG instead of
		  <Facies name="F1">
			  <ProbCube> 0.75 </ProbCube>
			</Facies>
			and
			<Facies name="F1">
			  <ProbCube>Øyvind</ProbCube>
			</Facies>
		there should have been something
			<Facies name="F1">
			  <ProbCubeFactor> 0.75 </ProbCube>
			</Facies>
			and
			<Facies name="F1">
			  <ProbCube3DParamName>Øyvind</ProbCube>
			</Facies>
		As it stands we loose out on possible validation (Any string has to be accepted)
	  -->
			<xs:element type="xs:string" name="ProbCube"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name" use="required"/>
	</xs:complexType>

	<xs:complexType name="FaciesProbForModelType">
		<xs:sequence>
			<xs:element type="FaciesProbType" name="Facies" maxOccurs="unbounded" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<!--
    Vario
    -->

	<xs:simpleType name="VarioNameType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="GENERAL_EXPONENTIAL" />
			<xs:enumeration value="EXPONENTIAL" />
			<xs:enumeration value="SPHERICAL" />
			<xs:enumeration value="GAUSSIAN" />
			<xs:enumeration value="MATERN32" />
			<xs:enumeration value="MATERN52" />
			<xs:enumeration value="MATERN72" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="VarioType">
		<xs:sequence>
			<xs:element type="PositiveFloat" name="MainRange"/>
			<xs:element type="PositiveFloat" name="PerpRange"/>
			<xs:element type="PositiveFloat" name="VertRange"/>
			<xs:element type="FloatDegrees360" name="AzimuthAngle"/>
			<xs:element type="FloatDegrees90" name="DipAngle"/>
			<xs:element name="Power" minOccurs="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="1.0"/>
						<xs:maxExclusive value="2.0"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
		<xs:attribute type="VarioNameType" name="name" use="required"/>
	</xs:complexType>

	<!--
    TrendTypes
    -->

	<xs:complexType name="Linear3DType">
		<xs:sequence>
			<xs:element type="FloatDegrees360" name="azimuth"/>
			<xs:element type="IntegerOneOrMinusOne" name="directionStacking" />
			<xs:element type="FloatDegrees90" name="stackAngle"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" fixed="Linear3D"/>
	</xs:complexType>

	<xs:complexType name="Elliptic3DType">
		<xs:sequence>
			<xs:element type="FloatDegrees360" name="azimuth"/>
			<xs:element type="IntegerOneOrMinusOne" name="directionStacking" />
			<xs:element type="FloatDegrees90" name="stackAngle"/>
			<xs:element type="xs:float" name="curvature"/>
			<xs:element type="xs:float" name="origin_x"/>
			<xs:element type="xs:float" name="origin_y"/>
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="origin_z_simbox"/>
			<xs:element type="OriginType" name="origintype"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" fixed="Elliptic3D"/>
	</xs:complexType>

	<xs:complexType name="EllipticCone3DType">
		<xs:sequence>
			<xs:element type="FloatDegrees360" name="azimuth"/>
			<xs:element type="IntegerOneOrMinusOne" name="directionStacking" />
			<xs:element type="FloatDegrees90" name="stackAngle"/>
			<xs:element type="xs:float" name="migrationAngle"/>
			<xs:element type="xs:float" name="curvature"/>
			<xs:element type="xs:float" name="relativeSize"/>
			<xs:element type="xs:float" name="origin_x"/>
			<xs:element type="xs:float" name="origin_y"/>
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="origin_z_simbox"/>
			<xs:element type="OriginType" name="origintype"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" fixed="EllipticCone3D"/>
	</xs:complexType>

	<xs:complexType name="Hyperbolic3DType">
		<xs:sequence>
			<xs:element type="FloatDegrees360" name="azimuth"/>
			<xs:element type="IntegerOneOrMinusOne" name="directionStacking" />
			<xs:element type="FloatDegrees90" name="stackAngle"/>
			<xs:element type="xs:float" name="migrationAngle"/>
			<xs:element type="xs:float" name="curvature"/>
			<xs:element type="xs:float" name="origin_x"/>
			<xs:element type="xs:float" name="origin_y"/>
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="origin_z_simbox"/>
			<xs:element type="OriginType" name="origintype"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" fixed="Hyperbolic3D"/>
	</xs:complexType>

	<xs:complexType name="RMSParameterType">
		<xs:sequence>
			<xs:element type="xs:string" name="TrendParamName"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" fixed="RMSParameter"/>
	</xs:complexType>

	<xs:complexType name="TrendType">
		<xs:choice>
			<xs:element name="Linear3D" type="Linear3DType" />
			<xs:element name="Elliptic3D" type="Elliptic3DType" />
			<xs:element name="EllipticCone3D" type="EllipticCone3DType" />
			<xs:element name="Hyperbolic3D" type="Hyperbolic3DType" />
			<xs:element name="RMSParameter" type="RMSParameterType" />
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="GaussFieldType">
		<xs:sequence>
			<xs:element type="VarioType" name="Vario"/>
			<xs:element type="TrendType" name="Trend" minOccurs="0" maxOccurs="1"/>
			<xs:element type="xs:float" name="RelStdDev" minOccurs="0"/>
			<xs:element type="xs:positiveInteger" name="SeedForPreview"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name" use="required"/>
	</xs:complexType>

	<xs:complexType name="ProbFracType">
		<xs:simpleContent>
			<xs:extension base="xs:float">
				<xs:attribute type="xs:string" name="name" use="optional"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="L3Type">
		<xs:sequence>
			<xs:element type="ProbFracType" name="ProbFrac" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="L2Type">
		<xs:sequence>
			<xs:element type="L3Type" name="L3" minOccurs="0" maxOccurs="1"/>
			<xs:element type="ProbFracType" name="ProbFrac" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="L1Type">
		<xs:sequence>
			<xs:element type="L2Type" name="L2" minOccurs="0" maxOccurs="1"/>
			<xs:element type="ProbFracType" name="ProbFrac" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute type="VH" name="direction"/>
	</xs:complexType>

	<xs:complexType name="OverLayFaciesType">
		<xs:sequence>
			<xs:element type="xs:float" name="TruncIntervalCenter"/>
			<xs:element type="xs:string" name="Background" maxOccurs="unbounded" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name"/>
	</xs:complexType>

	<xs:complexType name="AlphaFieldType">
		<xs:sequence>
			<xs:element type="xs:string" name="TruncIntervalCenter"/>
			<xs:element type="ProbFracType" name="ProbFrac"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name" use="required"/>
	</xs:complexType>

	<xs:complexType name="GroupType">
		<xs:sequence>
			<xs:element type="AlphaFieldType" name="AlphaField" minOccurs="1" maxOccurs="unbounded"/>
			<xs:element type="xs:string" name="BackGround" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="OverLayModelType">
		<xs:sequence>
			<xs:element type="GroupType" name="Group"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Trunc3D_Bayfill_BackGroundModelType">
		<xs:sequence>
			<xs:element type="xs:string" name="AlphaFields"/>
			<xs:element type="IntegerOneOrZero" name="UseConstTruncParam" minOccurs="0" />
			<xs:element type="xs:string" name="Floodplain"/>
			<xs:element type="xs:string" name="Subbay"/>
			<xs:element type="xs:string" name="WBF"/>
			<xs:element type="xs:string" name="BHD"/>
			<xs:element type="xs:string" name="Lagoon"/>
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="SF" />
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="YSF"/>
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="SBHD"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Trunc2D_Angle_BackGroundModelType">
		<xs:sequence>
			<xs:element type="xs:string" name="AlphaFields"/>
			<xs:element type="IntegerOneOrZero" name="UseConstTruncParam" minOccurs="0" />
			<xs:element type="FaciesType" name="Facies" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="FaciesType">
		<xs:sequence>
			<xs:element type="FloatDegrees360" name="Angle"/>
			<xs:element type="FloatBetweenZeroAndOneInclusive" name="ProbFrac"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name" use="required"/>
	</xs:complexType>

	<xs:complexType name="Trunc2D_Cubic_BackGroundModelType">
		<xs:sequence>
			<xs:element type="xs:string" name="AlphaFields"/>
			<xs:element type="L1Type" name="L1"/>

		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Trunc3D_BayfillType">
		<xs:sequence>
			<xs:element type="Trunc3D_Bayfill_BackGroundModelType" name="BackGroundModel"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Trunc2D_AngleType">
		<xs:sequence>
			<xs:element type="Trunc2D_Angle_BackGroundModelType" name="BackGroundModel"/>
			<xs:element type="OverLayModelType" name="OverLayModel"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Trunc2D_CubicType">
		<xs:sequence>
			<xs:element type="Trunc2D_Cubic_BackGroundModelType" name="BackGroundModel"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="TruncationRuleType">
		<xs:choice>
			<xs:element type="Trunc3D_BayfillType" name="Trunc3D_Bayfill"/>
			<xs:element type="Trunc2D_AngleType" name="Trunc2D_Angle"/>
			<xs:element type="Trunc2D_CubicType" name="Trunc2D_Cubic"/>
		</xs:choice>
		<xs:attribute type="xs:byte" name="nGFields" use="required"/>
	</xs:complexType>

	<xs:simpleType name="UseConstProbType">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="1"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="ZoneType">
		<xs:sequence>
			<xs:element type="UseConstProbType" name="UseConstProb"/>
			<xs:element type="PositiveFloat" name="SimBoxThickness"/>
            <xs:element type="NonEmptyString" name="HorizonNameVarioTrend" />
			<xs:element type="FaciesProbForModelType" name="FaciesProbForModel"/>
			<xs:element type="GaussFieldType" name="GaussField" maxOccurs="unbounded" minOccurs="0"/>
			<xs:element type="TruncationRuleType" name="TruncationRule"/>
		</xs:sequence>
		<xs:attribute type="xs:positiveInteger" name="number"/>
		<xs:attribute type="xs:positiveInteger" name="regionNumber" use="optional"/>
	</xs:complexType>

	<xs:complexType name="ZoneModelsType">
		<xs:sequence>
			<xs:element type="ZoneType" name="Zone" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

    <!--
    APSModel element
    -->
	<xs:complexType name="APSModelType">
		<xs:sequence>
			<xs:element name="Preview" type="PreviewType" minOccurs="0" />
            <xs:element name="SelectedZonesAndRegions" type="SelectedZonesAndRegionsType" minOccurs="0"/>
			<xs:element name="Optimization" type="OptimizationType" minOccurs="0" />
			<xs:element name="RMSProjectName" type="NonEmptyString" minOccurs="0"/>
			<xs:element name="RMSWorkflowName" type="NonEmptyString" minOccurs="0"/>
			<xs:element name="RMSGaussFieldScriptName" type="NonEmptyString" />
			<xs:element name="GridModelName" type="NonEmptyString" />
			<xs:element name="ZoneParamName" type="NonEmptyString" />
            <!--Actually, Region param name is mandatory if there is at least one region with zoneNumber > 0 -->
			<xs:element name="RegionParamName" type="NonEmptyString" minOccurs="0" />
			<xs:element name="ResultFaciesParamName" type="NonEmptyString" />
			<xs:element name="PrintInfo" type="PrintInfoType" />
			<xs:element name="SeedFile" type="NonEmptyString" minOccurs="0"/>
			<xs:element name="WriteSeeds" type="YesNo" minOccurs="0"/>
			<xs:element name="MainFaciesTable" type="MainFaciesTableType" />
            <xs:element name="GaussFieldJobNames" type="GaussFieldJobNamesType" minOccurs="0"/>
			<xs:element type="ZoneModelsType" name="ZoneModels"/>
		</xs:sequence>
		<xs:attribute name="version" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:minInclusive value="1" />
					<xs:pattern value="\d+\.\d{1}" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
</xs:schema>
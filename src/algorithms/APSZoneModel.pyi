# -*- coding: utf-8 -*-
from src.algorithms.APSFaciesProb import APSFaciesProb
from src.algorithms.APSGaussModel import APSGaussModel
from src.algorithms.Trend3D import Trend3D_elliptic, Trend3D_hyperbolic, Trend3D_linear, Trend3D_rms_param
from src.algorithms.Trunc2D_Angle_xml import Trunc2D_Angle
from src.algorithms.Trunc2D_Cubic_xml import Trunc2D_Cubic
from src.algorithms.Trunc3D_bayfill_xml import Trunc3D_bayfill
from src.utils.constants.simple import Debug, VariogramType
from typing import List, Optional, Union
from xml.etree.ElementTree import Element, ElementTree

Trend = Union[Trend3D_linear, Trend3D_hyperbolic, Trend3D_rms_param, Trend3D_elliptic]
TruncationRule = Union[Trunc3D_bayfill, Trunc2D_Cubic, Trunc2D_Angle]


class APSZoneModel:
    def __init__(
        self,
        ET_Tree: Optional[ElementTree] = None,
        zoneNumber: int = 0,
        regionNumber: int = 0,
        modelFileName: Optional[str] = None,
        useConstProb: int = False,
        simBoxThickness: float = 10.0,
        horizonNameForVariogramTrendMap: Optional[str] = None,
        faciesProbObject: Optional[APSFaciesProb] = None,
        gaussModelObject: Optional[APSGaussModel] = None,
        truncRuleObject: Optional[TruncationRule] = None,
        debug_level: Debug = Debug.OFF,
        keyResolution: int = 100
    ) -> None: ...
    def XMLAddElement(self, parent: Element) -> None: ...
    def getAnisotropyAzimuthAngle(self, gaussFieldName: str) -> float: ...
    def getAnisotropyDipAngle(self, gaussFieldName: str) -> float: ...
    def getMainRange(self, gaussFieldName: str) -> float: ...
    def getPerpRange(self, gaussFieldName: str) -> float: ...
    def getPower(self, gaussFieldName: str) -> float: ...
    def getRegionNumber(self) -> int: ...
    def getTrendModelObject(self, gfName: str) -> Trend: ...
    def getUsedGaussFieldNames(self) -> List[str]: ...
    def getVariogramType(self, gaussFieldName: str) -> VariogramType: ...
    def getVertRange(self, gaussFieldName: str) -> float: ...
    def getZoneNumber(self) -> int: ...
    def setAnisotropyAzimuthAngle(self, gaussFieldName: str, angle: float) -> int: ...
    def setAnisotropyDipAngle(self, gaussFieldName: str, angle: float) -> int: ...
    def setMainRange(self, gaussFieldName: str, range1: float) -> int: ...
    def setPerpRange(self, gaussFieldName: str, range2: float) -> int: ...
    def setPower(self, gaussFieldName: str, power: float) -> int: ...
    def setVariogramType(self, gaussFieldName: str, variogramType: VariogramType) -> int: ...
    def setVertRange(self, gaussFieldName: str, range3: float) -> int: ...

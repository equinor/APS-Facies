# -*- coding: utf-8 -*-
from src.algorithms.APSFaciesProb import APSFaciesProb
from src.algorithms.APSGaussModel import APSGaussModel, GaussianFieldSimulation, CrossSection, GaussianFieldName
from src.algorithms.Trend3D import Trend3D_elliptic, Trend3D_hyperbolic, Trend3D_linear, Trend3D_rms_param, Trend3D
from src.algorithms.Trunc2D_Angle_xml import Trunc2D_Angle
from src.algorithms.Trunc2D_Cubic_xml import Trunc2D_Cubic
from src.algorithms.Trunc3D_bayfill_xml import Trunc3D_bayfill
from src.utils.constants.simple import Debug, VariogramType
from typing import List, Optional, Union, Tuple
from xml.etree.ElementTree import Element, ElementTree

Trend = Union[Trend3D_linear, Trend3D_hyperbolic, Trend3D_rms_param, Trend3D_elliptic]
TruncationRule = Union[Trunc3D_bayfill, Trunc2D_Cubic, Trunc2D_Angle]


class APSZoneModel:
    truncation_rule: TruncationRule
    zone_number: int
    region_number: int
    debug_level: Debug
    used_gaussian_field_names: List[str]
    __faciesProbObject: APSFaciesProb
    __gaussModelObject: APSGaussModel
    def __init__(
        self,
        ET_Tree: Optional[ElementTree] = None,
        zoneNumber: int = 0,
        regionNumber: int = 0,
        modelFileName: Optional[str] = None,
        useConstProb: bool = False,
        simBoxThickness: float = 10.0,
        horizonNameForVariogramTrendMap: Optional[str] = None,
        faciesProbObject: Optional[APSFaciesProb] = None,
        gaussModelObject: Optional[APSGaussModel] = None,
        truncRuleObject: Optional[TruncationRule] = None,
        debug_level: Debug = Debug.OFF,
        keyResolution: int = 100
    ) -> None: ...
    def __interpretXMLTree(self, ET_Tree, modelFileName): ...
    def XMLAddElement(self, parent: Element, fmu_attributes: List[str]) -> None: ...
    def getFaciesInZoneModel(self) -> List[str]: ...
    def getGaussFieldIndexListInZone(self) -> List[int]: ...
    def getProbParamName(self, fName: str) -> str: ...
    def getSimBoxThickness(self) -> float: ...
    def getTruncationParam(self, gridModel: str, realNumber: int): ...
    def useConstProb(self) -> bool: ...
    def getAzimuthAngle(self, __gaussFieldName: GaussianFieldName) -> float: ...
    def getAzimuthAngleFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getDipAngle(self, __gaussFieldName: GaussianFieldName) -> float: ...
    def getDipAngleFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getMainRange(self, __gaussFieldName: GaussianFieldName) -> float: ...
    def getMainRangeFmuUpdatable(self, __gaussFieldName: GaussianFieldName) -> bool: ...
    def getPerpRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getPerpRange(self, __gaussFieldName: GaussianFieldName) -> float: ...
    def getPower(self, __gaussFieldName: GaussianFieldName) -> float: ...
    def getPowerFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getTrendModel(self, gfName: GaussianFieldName) -> Trend3D: ...
    def getTrendModelObject(self, gfName: str) -> Trend: ...
    def getVariogramType(self, __gaussFieldName: GaussianFieldName) -> VariogramType: ...
    def getVariogramTypeNumber(self, __gaussFieldName: GaussianFieldName): ...
    def getVertRange(self, __gaussFieldName: GaussianFieldName) -> float: ...
    def getVertRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def hasFacies(self, fName: str) -> bool: ...
    def setAzimuthAngle(self, __gaussFieldName: GaussianFieldName, angle: float) -> int: ...
    def setDipAngle(self, __gaussFieldName: GaussianFieldName, angle: float) -> int: ...
    def setMainRange(self, __gaussFieldName: GaussianFieldName, range1: float) -> int: ...
    def setPerpRange(self, __gaussFieldName: GaussianFieldName, range2: float) -> int: ...
    def setPower(self, __gaussFieldName: GaussianFieldName, power: float) -> int: ...
    def setVariogramType(self, __gaussFieldName: GaussianFieldName, variogramType: VariogramType) -> int: ...
    def setVertRange(self, __gaussFieldName: GaussianFieldName, range3: float) -> int: ...
    def simGaussFieldWithTrendAndTransform(
        self,
        simulation_box_size: Tuple[float, float, float],
        grid_size: Tuple[int, int, int],
        gridAzimuthAngle: float,
        crossSection: CrossSection,
    ) -> List[GaussianFieldSimulation]: ...
    def applyTruncations(self, probDefined, GFAlphaList, faciesReal, nDefinedCells, cellIndexDefined): ...

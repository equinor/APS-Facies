# -*- coding: utf-8 -*-
from enum import Enum
from src.algorithms.APSFaciesProb import APSFaciesProb
from src.algorithms.APSGaussModel import APSGaussModel, GaussianFieldSimulation, GaussianFieldName, GaussianField
from src.algorithms.properties import CrossSection
from src.algorithms.Trend3D import Trend3D_elliptic, Trend3D_hyperbolic, Trend3D_linear, Trend3D_rms_param, Trend3D
from src.algorithms.Trunc2D_Angle_xml import Trunc2D_Angle
from src.algorithms.Trunc2D_Cubic_xml import Trunc2D_Cubic
from src.algorithms.Trunc3D_bayfill_xml import Trunc3D_bayfill
from src.utils.constants.simple import Debug, VariogramType
from typing import List, Optional, Union, Tuple
from xml.etree.ElementTree import Element, ElementTree

from src.utils.containers import FmuAttribute

Trend = Union[Trend3D_linear, Trend3D_hyperbolic, Trend3D_rms_param, Trend3D_elliptic]
TruncationRule = Union[Trunc3D_bayfill, Trunc2D_Cubic, Trunc2D_Angle]


class Conform(Enum):
    Proportional = 'Proportional'
    TopConform = 'TopConform'
    BaseConform = 'BaseConform'


class APSZoneModel:
    truncation_rule: TruncationRule
    zone_number: int
    region_number: int
    grid_layout: Optional[Conform]
    uses_region: bool
    debug_level: Debug
    __debug_level: Debug
    used_gaussian_field_names: List[GaussianFieldName]
    gaussian_fields_in_truncation_rule: List[str]
    gaussian_fields: List[GaussianField]
    key_resolution: int
    use_constant_probabilities: bool
    facies_in_zone_model: List[str]
    __faciesProbObject: APSFaciesProb
    __gaussModelObject: APSGaussModel
    _grid_layout: Optional[Conform]
    __simBoxThickness: float
    __useConstProb: bool
    __keyResolution: int

    def __init__(
        self,
        ET_Tree: Optional[ElementTree] = None,
        zoneNumber: int = 0,
        regionNumber: int = 0,
        modelFileName: Optional[str] = None,
        useConstProb: bool = False,
        simBoxThickness: float = 10.0,
        horizonNameForVariogramTrendMap: Optional[str] = None,
        faciesProbObject: Optional[APSFaciesProb] = None,
        gaussModelObject: Optional[APSGaussModel] = None,
        truncRuleObject: Optional[TruncationRule] = None,
        debug_level: Debug = Debug.OFF,
        keyResolution: int = 100,
        grid_layout: Optional[Union[str, Conform]] = None,
    ) -> None: ...
    def __interpretXMLTree(self, ET_Tree, modelFileName): ...
    def XMLAddElement(self, parent: Element, fmu_attributes: List[FmuAttribute]) -> None: ...
    def getGaussFieldsInTruncationRule(self) -> List[str]: ...
    def getGaussFieldIndexListInZone(self) -> List[int]: ...
    def getProbParamName(self, fName: str) -> str: ...
    def getAllProbParamForZone(self): ...
    def getConstProbValue(self, fName): ...
    sim_box_thickness: float
    def hasTrendModel(self, gfName: GaussianFieldName) -> bool: ...
    def getTruncationParam(self, gridModel: str, realNumber: int): ...
    def getAzimuthAngle(self, gaussFieldName: GaussianFieldName) -> float: ...
    def getAzimuthAngleFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getDipAngle(self, gaussFieldName: GaussianFieldName) -> float: ...
    def getDipAngleFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getMainRange(self, gaussFieldName: GaussianFieldName) -> float: ...
    def getMainRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getPerpRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def getPerpRange(self, gaussFieldName: GaussianFieldName) -> float: ...
    def getPower(self, gaussFieldName: GaussianFieldName) -> float: ...
    def getPowerFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def get_gaussian_field(self, name: GaussianFieldName) -> Optional[GaussianField]: ...
    def getTrendModel(self, gfName: GaussianFieldName) -> Trend3D: ...
    def getTrendModelObject(self, gfName: str) -> Trend: ...
    def getVariogramType(self, gaussFieldName: GaussianFieldName) -> VariogramType: ...
    def getVariogramTypeNumber(self, gaussFieldName: GaussianFieldName): ...
    def getVertRange(self, gaussFieldName: GaussianFieldName) -> float: ...
    def getVertRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName) -> bool: ...
    def hasFacies(self, fName: str) -> bool: ...
    def setAzimuthAngle(self, gaussFieldName: GaussianFieldName, angle: float) -> int: ...
    def setAzimuthAngleFmuUpdatable(self, gaussFieldName: GaussianFieldName, value: bool) -> None: ...
    def setDipAngle(self, gaussFieldName: GaussianFieldName, angle: float) -> int: ...
    def setDipAngleFmuUpdatable(self, gaussFieldName: GaussianFieldName, value: bool) -> None: ...
    def setMainRange(self, gaussFieldName: GaussianFieldName, range1: float) -> int: ...
    def setMainRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName, value: bool) -> None: ...
    def setPerpRange(self, gaussFieldName: GaussianFieldName, range2: float) -> int: ...
    def setPerpRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName, value: bool) -> None: ...
    def setPower(self, gaussFieldName: GaussianFieldName, power: float) -> int: ...
    def setPowerFmuUpdatable(self, gaussFieldName: GaussianFieldName, value: bool) -> None: ...
    def setVariogramType(self, gaussFieldName: GaussianFieldName, variogramType: VariogramType) -> int: ...
    def setVertRange(self, gaussFieldName: GaussianFieldName, range3: float) -> int: ...
    def setRelStdDev(self, gaussFieldName, relStdDev): ...
    def setRelStdDevFmuUpdatable(self, gaussFieldName, value): ...
    def setUseConstProb(self, useConstProb): ...
    def setSeedForPreviewSimulation(self, gfName, seed): ...
    def setSimBoxThickness(self, thickness): ...
    def updateFaciesWithProbForZone(self, faciesList, faciesProbList): ...
    def removeFaciesWithProbForZone(self, fName): ...
    def updateGaussFieldParam(self, gfName, variogramType, range1, range2, range3, angle, power, relStdDev=0.0, trendModelObj=None): ...
    def updateGaussFieldVariogramParam(self, gfName, variogramType, range1, range2, range3, angle, power): ...
    def removeGaussFieldParam(self, gfName): ...
    def updateGaussFieldTrendParam(self, gfName, trendModelObj, relStdDev): ...
    def setVertRangeFmuUpdatable(self, gaussFieldName: GaussianFieldName, value: bool) -> None: ...
    def simGaussFieldWithTrendAndTransform(
        self,
        simulation_box_size: Tuple[float, float, float],
        grid_size: Tuple[int, int, int],
        gridAzimuthAngle: float,
        crossSection: CrossSection,
        original_simulation_box_origin,
    ) -> List[GaussianFieldSimulation]: ...
    def findDistinctTruncationCubes(self, probabilities, num_cells, num_facies): ...
    def applyTruncations(self, probDefined, GFAlphaList, faciesReal, cellIndexDefined): ...
    def applyTruncations_vectorized(self, probDefined, alpha_fields, faciesReal, cellIndexDefined): ...

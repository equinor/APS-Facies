# -*- coding: utf-8 -*-
from collections import OrderedDict

from src.algorithms.properties import CrossSection
from src.algorithms.APSMainFaciesTable import APSMainFaciesTable
from src.algorithms.APSZoneModel import APSZoneModel
from src.utils.constants.simple import Debug, CrossSectionType
from typing import Any, List, Optional, Tuple, Dict, Type
from xml.etree.ElementTree import Element, ElementTree

from roxar import Project


class APSModel:
    __aps_model_version: str
    __class_name: str
    __zoneModelTable: Dict[Tuple[int, int], APSZoneModel]
    def __init__(
            self,
            model_file_name: Optional[str] = None,
            aps_model_version: str = '1.0',
            rms_project_name: str = '',
            rms_workflow_name: str = '',
            rms_grid_model_name: str = '',
            rms_zone_parameter_name: str = '',
            rms_region_parameter_name: str = '',
            rms_facies_parameter_name: str = '',
            seed_file_name: str = 'seed.dat',
            write_seeds: bool = True,
            main_facies_table: Optional[] = None,
            zone_model_table: Optional[] = None,
            preview_zone: int = 0,
            preview_region: int = 0,
            preview_cross_section_type: str = 'IJ',
            preview_cross_section_relative_pos: float = 0.5,
            preview_scale: float = 1.0,
            debug_level: Debug = Debug.OFF
    ) -> None: ...
    grid_model_name: str
    debug_level: Debug
    seed_file_name: str
    preview_scale: float
    preview_cross_section_type: CrossSectionType
    preview_cross_section_relative_position: float
    __preview_cross_section: CrossSection
    preview_cross_section: CrossSection
    sorted_zone_models: OrderedDict[Tuple[int, int], APSZoneModel]
    use_constant_probability: bool
    write_seeds: bool
    def __interpretXMLModelFile(self, modelFileName: str, debug_level=Debug.OFF): ...
    @classmethod
    def from_string(cls, xml_content: str) -> APSModel: ...
    def __interpretTree(
            self,
            root:          Element,
            debug_level:   Debug         = Debug.OFF,
            modelFileName: Optional[str] = None
    ) -> None: ...
    def updateXMLModelFile(
            self,
            modelFileName:              Optional[str]       = None,
            parameterFileName:          Optional[str]       = None,
            project:                    Optional[Project]   = None,
            workflow_name:              Optional[str]       = None,
            uncertainty_variable_names: Optional[List[str]] = None,
            realisation_number:         int                 = 0,
            debug_level:                Debug               = Debug.OFF
    ) -> ElementTree: ...
    def __checkZoneModels(self) -> None: ...
    def getXmlTree(self): ...
    def getRoot(self): ...
    def XMLAddElement(self, root: Element, fmu_attributes: List[Any]) -> str: ...
    def addNewZone(self, zoneObject: APSZoneModel) -> None: ...
    def deleteZone(self, zoneNumber: int, regionNumber: int = 0) -> None: ...
    def getAllZoneModels(self): ...
    def getMainFaciesTable(self) -> APSMainFaciesTable: ...
    def getRMSProjectName(self) -> str: ...
    def getGridModelName(self) -> str: ...
    def getRegionNumberListForSpecifiedZoneNumber(self, zoneNumber: int) -> List[int]: ...
    def getPreviewRegionNumber(self) -> int: ...
    def getPreviewZoneNumber(self) -> int: ...
    def getResultFaciesParamName(self): ...
    def getSelectedRegionNumberListForSpecifiedZoneNumber(self, zoneNumber: int) -> List[int]: ...
    def getSelectedZoneNumberList(self) -> List[int]: ...
    def isAllZoneRegionModelsSelected(self): ...
    def isSelected(self, zoneNumber: int, regionNumber: int) -> bool: ...
    def getZoneModel(self, zoneNumber: int, regionNumber: int = 0) -> APSZoneModel: ...
    def getAllGaussFieldNamesUsed(self): ...
    def getZoneParamName(self): ...
    def getRegionParamName(self): ...
    def getZoneNumberList(self) -> List[int]: ...
    def setMainFaciesTable(self, faciesTableObj: APSMainFaciesTable) -> None: ...
    def getAllProbParam(self): ...
    def setPreviewZoneAndRegionNumber(self, zoneNumber: int, regionNumber: int = 0) -> None: ...
    def setRmsGridModelName(self, name: str) -> None: ...
    def setRmsProjectName(self, name: str) -> None: ...
    def setRmsResultFaciesParamName(self, name: str) -> None: ...
    def setRmsWorkflowName(self, name: str) -> None: ...
    def setRmsZoneParamName(self, name: str) -> None: ...
    def setRmsRegionParamName(self, name: str) -> None: ...
    def setSelectedZoneAndRegionNumber(self, selectedZoneNumber: int, selectedRegionNumber: int = 0) -> None: ...
    def dump(
            self,
            name:                       str,
            attributes_file_name:       Optional[str]       = None,
            debug_level:                Debug               = Debug.OFF,
    ) -> None: ...
    def writeModel(
            self,
            modelFileName:              str,
            attributesFileName:         Optional[str]       = None,
            debug_level:                Debug               = Debug.OFF,
    ) -> None: ...
    @staticmethod
    def __readParamFromFile(inputFile: str, debug_level: Debug = Debug.OFF): ...
    @staticmethod
    def __getParamFromRMSTable(project: Project, workflow_name: str, uncertainty_variable_names, realisation_number: int, debug_level: Debug = Debug.OFF) -> List[Tuple[str, str]]: ...
    @staticmethod
    def writeModelFromXMLRoot(inputETree, outputModelFileName): ...

ApsModel = Type[APSModel]

# -*- coding: utf-8 -*-
from src.utils.constants.simple import Debug
from typing import Dict, List, Optional, Union, Tuple
from xml.etree.ElementTree import Element, ElementTree

from src.utils.records import FaciesRecord


FaciesName = str
FaciesCode = int


class Facies:
    name: str
    code: int
    def __init__(self, name: str, code: int): ...
    def __eq__(self, other: Facies) -> bool: ...
    def __getitem__(self, item: int) -> Union[int, str]: ...
    @classmethod
    def from_definition(cls, definition: Union[
        FaciesRecord,
        Tuple[str, int],
        List[Union[str, int]],
    ]) -> Facies: ...
    def to_list(self) -> Tuple[FaciesName, FaciesCode]: ...


class FaciesTable(list):
    def __init__(self, facies: Optional[List[Facies]] = None): ...
    def __getitem__(self, item: Union[int, FaciesName]) -> Facies: ...
    def __contains__(self, item: Union[FaciesName, Facies]) -> bool: ...
    def names(self) -> List[FaciesName]: ...
    def append(self, facies: Facies) -> None: ...
    def pop(self, facies: Optional[Union[int, FaciesName, Facies]] = None) -> Facies: ...


class APSMainFaciesTable:
    __facies_table: FaciesTable
    __class_name: str
    __model_file_name: str
    __blocked_well: str
    __blocked_well_log: str
    def __init__(
        self,
        ET_Tree: Optional[ElementTree] = None,
        modelFileName: Optional[str] = None,
        facies_table: Optional[Dict[int, str]] = None,
        debug_level: Debug = Debug.OFF
    ) -> None: ...
    def __len__(self) -> int: ...
    def __interpretXMLTree(self, ET_Tree: ElementTree) -> None: ...
    def XMLAddElement(self, root: Element) -> None: ...
    def add_facies(self, name: str, code: int) -> int: ...
    def getClassName(self) -> str: ...
    def getFaciesCode(self, index: int) -> int: ...
    def getFaciesCodeForFaciesName(self, fName: str) -> int: ...
    def getFaciesIndx(self, fName: str) -> int: ...
    def getFaciesName(self, index: int) -> str: ...
    def getFaciesTable(self) -> List[List[Union[str, int]]]: ...
    def has_facies_int_facies_table(self, facies_name: str) -> bool: ...
    def remove_facies(self, facies_name: str) -> None: ...
    def __checkUniqueFaciesNamesAndCodes(self) -> bool: ...

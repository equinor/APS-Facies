# -*- coding: utf-8 -*-
from src.utils.constants.simple import Debug, OriginType
from typing import List, Optional
from xml.etree.ElementTree import Element


class Trend3D:
    def _XMLAddElementTag(self, trendElement: Element) -> None: ...
    def __init__(
        self,
        trendRuleXML: Optional[Element],
        modelFileName: Optional[str] = None,
        debug_level: int = Debug.OFF
    ) -> None: ...
    def _interpretXMLTree(self, trendRuleXML: Element, modelFileName: str) -> None: ...
    def getAzimuth(self) -> float: ...
    def getStackingAngle(self) -> float: ...
    def getStackingDirection(self) -> int: ...
    def get_origin_type_from_model_file(
        self,
        model_file_name: str,
        trendRuleXML: Element
    ) -> OriginType: ...
    def initialize(
        self,
        azimuthAngle: float = 0.0,
        stackingAngle: float = 0.01,
        direction: int = 1,
        debug_level: Debug = Debug.OFF
    ) -> None: ...
    def setAzimuth(self, angle: float) -> None: ...
    def setStackingAngle(self, stackingAngle: float) -> None: ...
    def setStackingDirection(self, direction: int) -> None: ...


class Trend3D_elliptic:
    def XMLAddElement(self, parent: Element) -> None: ...
    def __init__(
        self,
        trendRuleXML: Optional[Element],
        modelFileName: Optional[str] = None,
        debug_level: Debug = Debug.OFF
    ) -> None: ...
    def _interpretXMLTree(self, trendRuleXML: Element, modelFileName: str) -> None: ...
    def getCurvature(self) -> float: ...
    def getOrigin(self) -> List[float]: ...
    def getOriginType(self) -> OriginType: ...
    def initialize(
        self,
        azimuthAngle: float,
        stackingAngle: float,
        direction: int,
        curvature: float = 1.0,
        origin: Optional[List[float]] = None,
        origin_type: OriginType = OriginType.RELATIVE,
        debug_level: Debug = Debug.OFF
    ) -> None: ...
    def setCurvature(self, curvature: float) -> None: ...
    def setOrigin(self, origin: List[float]) -> None: ...
    def setOriginType(self, originType: OriginType) -> None: ...


class Trend3D_elliptic_cone:
    def XMLAddElement(self, parent: Element) -> None: ...
    def __init__(
        self,
        trendRuleXML: Optional[Element],
        modelFileName: Optional[str] = None,
        debug_level: int = Debug.OFF
    ) -> None: ...
    def _interpretXMLTree(self, trendRuleXML: Element, modelFileName: str) -> None: ...
    def initialize(
        self,
        azimuthAngle: float,
        stackingAngle: float,
        direction: int,
        migrationAngle: float = 0.0,
        curvature: float = 1.0,
        relativeSize: float = 1.0,
        origin: Optional[List[float]] = None,
        origin_type: OriginType = OriginType.RELATIVE,
        debug_level: Debug = Debug.OFF
    ) -> None: ...


class Trend3D_hyperbolic:
    def XMLAddElement(self, parent: Element) -> None: ...
    def __init__(
        self,
        trendRuleXML: Optional[Element],
        modelFileName: Optional[str] = None,
        debug_level: int = Debug.OFF
    ) -> None: ...
    def _interpretXMLTree(self, trendRuleXML: Element, modelFileName: str) -> None: ...
    def getCurvature(self) -> float: ...
    def getMigrationAngle(self) -> float: ...
    def getOrigin(self) -> List[float]: ...
    def getOriginType(self) -> OriginType: ...
    def initialize(
        self,
        azimuthAngle: float,
        stackingAngle: float,
        direction: int,
        migrationAngle: float,
        curvature: float,
        origin: Optional[List[float]] = None,
        origin_type: OriginType = OriginType.RELATIVE,
        debug_level: Debug = Debug.OFF
    ) -> None: ...
    def setCurvature(self, curvature: float) -> None: ...
    def setMigrationAngle(self, migrationAngle: float) -> None: ...
    def setOrigin(self, origin: List[float]) -> None: ...
    def setOriginType(self, originType: OriginType) -> None: ...


class Trend3D_linear:
    def XMLAddElement(self, parent: Element) -> None: ...
    def __init__(
        self,
        trendRuleXML: Optional[Element],
        modelFileName: Optional[str] = None,
        debug_level: int = Debug.OFF
    ) -> None: ...
    def _interpretXMLTree(self, trendRuleXML: Element, modelFileName: str) -> None: ...
    def initialize(
        self,
        azimuthAngle: float,
        stackingAngle: float,
        direction: int,
        debug_level: Debug = Debug.OFF
    ) -> None: ...


class Trend3D_rms_param:
    def XMLAddElement(self, parent: Element) -> None: ...
    def __init__(
        self,
        trendRuleXML: Element,
        modelFileName: Optional[str] = None,
        debug_level: int = Debug.OFF
    ) -> None: ...
    def _interpretXMLTree(self, trendRuleXML: Element, modelFileName: str) -> None: ...
    def getTrendParamName(self) -> str: ...
    def setTrendParamName(self, paramName: str) -> None: ...

# -*- coding: utf-8 -*-
from typing import List, Dict, Union, Callable, NamedTuple
from types import ModuleType

try:
    from roxar import Project
    from roxar.grid import GridModel, GridModels
    from roxar.zones import Zone, Zones
except ImportError:
    from src.utils.roxar.mock import Roxar, Project, GridModel, GridModels, Zone, Zones, Property, Properties, BlockedWellsSet, BlockedWell

RoxarModule = Union[Roxar, ModuleType]

class CodeName(NamedTuple):
    code: int
    name: str


class RMSData:
    def __init__(self, roxar: RoxarModule, project: Project): ...
    def is_discrete(self, _property) -> bool: ...
    def get_grid_models(self) -> GridModels: ...
    def get_grid_model(self, name: str) -> GridModel: ...
    def get_grid_model_names(self) -> List[str]: ...
    def get_zone_parameters(self, grid_model_name: str) -> List[str]: ...
    def get_zones(self, grid_name: str, zone_parameter: str) -> List[Dict]: ...
    def get_regions(self, grid_name: str, zone_name: str, region_parameter: str) -> Properties: ...
    def is_zone_parameter(self, param: Property) -> bool: ...
    def is_region_parameter(self, param: Property) -> bool: ...
    def _get_parameter_names(self, grid_model_name:str, check: Callable) -> List[str]: ...
    def _get_blocked_well_set(self, grid_model_name: str) -> BlockedWellsSet: ...
    def get_blocked_well_logs(self, grid_model_name: str, blocked_well_name: str) -> List[str]: ...
    def get_blocked_well(self, grid_model_name: str, blocked_well_name: str) -> BlockedWell: ...
    def get_blocked_well_set_names(self, grid_model_name: str) -> List[str]: ...
    def get_facies_table_from_blocked_well_log(self, grid_model_name: str, bw_name: str, facies_log_name: str) -> Dict[str, int]: ...
    @staticmethod
    def get_code_names(_property: Property) -> List[CodeName]: ...


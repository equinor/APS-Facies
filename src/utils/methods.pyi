# -*- coding: utf-8 -*-
from enum import Enum
from typing import Dict, TypeVar, Optional, Set, List, Type, overload, Tuple, NewType
from xml.etree.ElementTree import Element

from src.utils.constants.simple import Debug

T = TypeVar('T')
U = TypeVar('U')

ModelFile = NewType('ModelFile', str)
GlobalIplFile = NewType('GlobalIplFile', str)
RmsProjectDataFile = NewType('RmsProjectDataFile', str)
TemporaryGaussianSimulation = NewType('TemporaryGaussianSimulation', str)

def invert_dict(to_be_inverted: Dict[T, U]) -> Dict[U, T]: ...

@overload
def get_legal_values_of_enum(enum: Enum) -> Set[int]: ...

@overload
def get_legal_values_of_enum(enum: Type[Enum]) -> Set[int]: ...

@overload
def get_printable_legal_values_of_enum(enum: Enum) -> List[str]: ...

@overload
def get_printable_legal_values_of_enum(enum: Type[Enum]) -> List[str]: ...

def get_item_from_model_file(tree: Element, keyword: str, model_file_name: Optional[str]) -> str: ...

def get_selected_zones(tree: Element, keyword: str, model_file: Optional[str]) -> List[int]: ...

@overload
def get_colors(n: int, min_colors: int) -> List[str]: ...

@overload
def get_colors(n: int) -> List[str]: ...

def get_run_parameters(**kwargs) -> Tuple[ModelFile, RmsProjectDataFile, GlobalIplFile, TemporaryGaussianSimulation, Debug]: ...
def get_model_file_name(**kwargs) -> ModelFile: ...
def get_debug_level(**kwargs) -> Debug: ...
def get_global_ipl_file(**kwargs) -> GlobalIplFile: ...
def get_rms_project_data_file(**kwargs) -> RmsProjectDataFile: ...
def _get_value(kwargs: Dict[str, T], legal_kwargs: List[str], default_value: T) -> T: ...
def _get_file_name(kwargs: Dict[str, str], legal_kwargs: List[str], default_name: str) -> str: ...
def get_prefix(**kwargs) -> str: ...
def calcAverage(nDefinedCells: int, cellIndexDefined: List[int], values: List[float]) -> float: ...

PROJECT_NAME ?= aps-gui
SHELL := /bin/bash
OS ?= $(shell uname -s)
EMPTY :=
ifeq ($(OS),Linux)
NUMBER_OF_PROCESSORS := $(shell cat /proc/cpuinfo | grep processor | wc -l)
TAR := tar
SED := sed
else  # Darwin
NUMBER_OF_PROCESSORS := $(shell sysctl -n hw.ncpu)
TAR := gtar
SED := gsed
endif
TAR_EXCRACT := $(TAR) -xf
LOG_DIR := logs
# Mode bay be 'production', or 'development'
MODE ?= production
# Valid options: TRACE, DEBUG, INFO (default), WARN, ERROR, CRITICAL
LOG_LEVEL := INFO
EXEC_NAME := app
MAIN_FILE := app.py
CODE_DIR ?= $(shell pwd)
LIB_DIR := $(CODE_DIR)/libs
BIN_DIR := $(CODE_DIR)/bin
PYTHONPATH := $(CODE_DIR):$(LIB_DIR):$(PYTHONPATH)
SOURCE_DIR := $(CODE_DIR)/src
BUILD_DIR := $(CODE_DIR)/build
PYTHON_API_DIR := $(SOURCE_DIR)/api
REMOVE_APS_GUI_TEMP_FOLDER := $(EMPTY)
ifeq ($(MODE),production)
REMOVE_APS_GUI_TEMP_FOLDER := --move
endif

ROXENV := roxenv
HAS_ROXENV := $(shell command -v $(ROXENV) 2>/dev/null)
ZIP := $(ROXENV) --zip
ifndef HAS_ROXENV
ZIP := zip --recurse-paths $(REMOVE_APS_GUI_TEMP_FOLDER) -9
ROXENV := $(EMPTY)
endif

ALLWAYS_INSTALL_WEB_DEPENDENCIES ?= yes
PACKAGE.JSON := $(EMPTY)
ifeq ($(ALLWAYS_INSTALL_WEB_DEPENDENCIES),yes)
PACKAGE.JSON := package.json
endif

RMS_DIR := $(CODE_DIR)/.rms
RMS_PROJECT ?= $(RMS_DIR)/testAPSWorkflow_new.rms11.0.0
WORKFLOWS_TO_PROJECT := $(EMPTY)
WRITE_WORKFLOW_FILES_TO_PROJECT ?= no
ifeq ($(WRITE_WORKFLOW_FILES_TO_PROJECT),yes)
WORKFLOWS_TO_PROJECT := --copy-to-rms-project $(RMS_PROJECT)
endif

ALLWAYS_GET_RMS_RESOURCES ?= no
GET_RMS_RESOURCES := $(EMPTY)
ifeq ($(ALLWAYS_GET_RMS_RESOURCES),yes)
GET_RMS_RESOURCES := get-rms get-rms-project
endif

APS_VERSION := $(shell echo $(shell git describe --abbrev=0 --tags) | sed -e "s/v//g")
LATEST_COMMIT_HASH := $(shell git rev-parse --short HEAD)

PLUGIN_NAME := aps_gui
PLUGIN_PREFIX ?= $(EMPTY)
PLUGIN_BIN := $(PLUGIN_NAME).plugin
PLUGIN_DIR := $(BUILD_DIR)/$(PLUGIN_NAME)
WEB_DIR := $(SOURCE_DIR)/gui
LIB_PREFIX := $(CODE_DIR)/libraries
LIB_SOURCE := $(LIB_PREFIX)/sources
APSW_DIR := $(LIB_SOURCE)/apsw
LIBGAUSS_FIELD_PATH := $(LIB_PREFIX)/libgaussField
EXAMPLES_FOLDER := $(CODE_DIR)/examples
ENTRY_POINT := $(SOURCE_DIR)/gui/$(MAIN_FILE)
TEST_FOLDER := $(SOURCE_DIR)/unit_test
INTEGRATION_TESTS := $(TEST_FOLDER)/integration
AUXILLARY := $(CODE_DIR)/auxillary
PYTHON_LIBRARY_CONSTANT := $(SOURCE_DIR)/utils/constants/autogenerated.py
DOCKERFILE := $(CODE_DIR)/Dockerfile
DOCKER_REGISTRY_SERVER := git.equinor.com:4567
DOCKER_REGISTRY := $(DOCKER_REGISTRY_SERVER)/aps/gui
# Paths local to the compiled app
APP_EXAMPLES := $(CODE_DIR)/examples
APP_LIBRARY := $(CODE_DIR)
REQUESTS_CA_BUNDLE ?= $(SSL_CERT_FILE)
PYTHON ?= $(shell which python)
PIPENV := $(PYTHON) -m pipenv
RUN := PYTHONPATH=$(PYTHONPATH) $(PIPENV) run
PIP ?= $(PYTHON) -m pip
PY.TEST := $(RUN) python -m pytest
PIPROT := $(RUN) piprot
PYLINT := $(RUN) pylint
SAFETY_CHECK := $(PIPENV) check
PYREVERSE := $(RUN) pyreverse
FLASK := $(RUN) flask

VUE_APP_APS_PROTOCOL := http
VUE_APP_APS_SERVER := localhost
VUE_APP_APS_API_PORT ?= 5000
VUE_APP_APS_GUI_PORT ?= 8080

# TODO?: SETUP.PY := PYTHONPATH=$(PYTHONPATH) $(PYTHON) setup.py ?
PYTHON_PREFIX := $(shell dirname $(PYTHON))/..
IMAGE_VERSION ?= $(shell $(BIN_DIR)/find-version-of-docker-image.py $(CODE_DIR))
IMAGE_NAME ?= $(PROJECT_NAME):$(IMAGE_VERSION)
DOCKER_IMAGE := $(DOCKER_REGISTRY)/$(IMAGE_NAME)

UI.PY := $(PYTHON_API_DIR)/ui.py
MAIN.PY := $(PYTHON_API_DIR)/main.py
INFO.XML := $(CODE_DIR)/info.xml

MKDIR := mkdir -p
REPLACE_SRC_BY_PYTHON_LOCATION := $(SED) -i -e 's/^from src/from .static.py/g'

DEPLOYMENT_USER := cicd_aps
DEPLOYMENT_PATH := /project/res/APSGUI
SERVERS := \
        tr-linrgsn019.tr.statoil.no \
#        st-linrgs236.st.statoil.no \
#        be-linrgsn097.be.statoil.no \
#        hou-linrgsn034.hou.statoil.no \
#        rio-linrgsn003.rio.statoil.no \
#        cal-linrgsn009.cal.statoil.no \
#        stjohn-linrgs006.stjohn.statoil.no \
#        ha-linrgsn050.ha.statoil.no \
#        st-lcmtop01.st.statoil.no \
#        hou-lcctop01.hou.statoil.no \
#        ffs01.hou.statoil.no \


# NRlib
BUILD_NRLIB ?= no
NRLIB := $(EMPTY)
TEST_NRLIB := $(EMPTY)
ifeq ($(BUILD_NRLIB),yes)
NRLIB := install-nrlib
TEST_NRLIB := test-nrlib
endif
NRLIB_PATH := $(LIB_SOURCE)/nrlib
NRLIB_VERSION ?= 1.1-r7

# APSW (Another Python SQLite Wrapper)
# Build options
BUILD_APSW ?= no
FETCH_APSW_SQLITE ?= yes

APSW_DEBUG := $(shell [[ $(MODE) -eq "development" ]] && echo "--debug" || echo "")
SQLITE_VERSION := 3.23.1
APSW_VERSION := $(SQLITE_VERSION)-r1

APSW := $(EMPTY)
FETCH_SQLITE := $(EMPTY)
ifeq ($(BUILD_APSW),yes)
APSW := install-apsw
ifeq ($(FETCH_APSW_SQLITE),yes)
FETCH_SQLITE := fetch --version $(SQLITE_VERSION) --all
endif
endif
APSW_DIR := $(LIB_PREFIX)/build/apsw-$(APSW_VERSION)

YARN := yarn --cwd $(WEB_DIR)

# TODO: Ensure that autogenerated paths are correct when deploying
define AUTOGENERATED_CONSTANTS
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This file is automatically created from make (make autogenerated-constants)
"""
__author__ = "Sindre Nistad"
__email__ = "snis@equinor.com"
__version__ = "0.2.2"
__status__ = "testing"

# --Values--
LATEST_COMMIT_HASH = '$(LATEST_COMMIT_HASH)'
LATEST_VERSION = '$(shell git describe --tags | grep -E v[0-9]+\.[0-9]+\.[0-9]+ | tr -d 'v')'
BUILD_NUMBER = '$(shell git rev-list --count HEAD 2>/dev/null || git rev-list --all | wc -l)'
BRANCH_NAME = '$(shell git rev-parse --abbrev-ref HEAD)'

# --Paths--
# Local to the machine
LIBRARY_FOLDER = '$(LIB_PREFIX)'
EXAMPLE_FOLDER = '$(EXAMPLES_FOLDER)'
# In the compiled app
LIBRARY_FOLDER_APP = '$(APP_LIBRARY)'
EXAMPLE_FOLDER_APP = '$(APP_EXAMPLES)'
# Standard model file location
MODEL_FILE_LOCATION = '$(CODE_DIR)/APS.xml'
endef
export AUTOGENERATED_CONSTANTS

SYSTEM_INSTALL_PIPENV ?= no
USER_INSTALL_PIPENV := $(EMPTY)
ifeq ($(SYSTEM_INSTALL_PIPENV),no)
USER_INSTALL_PIPENV := --user
endif

COLOR = \033[32;01m
NO_COLOR = \033[0m
.PHONY: help run package.json

# Build / clean / run
build: clean-all init

build-gui: clean-build build-front-end compile-files-for-plugin
	cd $(BUILD_DIR) && \
	$(ZIP) $(PLUGIN_BIN) $(PLUGIN_NAME)
	mv $(BUILD_DIR)/$(PLUGIN_BIN) $(CODE_DIR)

compile-files-for-plugin: gather-python-scripts auxillary-files compile-python-files

gather-python-scripts: copy-python-files
	cp $(UI.PY) $(PLUGIN_DIR)
	cp $(MAIN.PY) $(PLUGIN_DIR)
	rm -rf $(PLUGIN_DIR)/src/unit_test \
	       $(PLUGIN_DIR)/src/api

compile-python-files: ensure-relative-import-statements-in-plugin move-python-files-to-static

ensure-relative-import-statements-in-plugin:
	$(PYTHON) $(BIN_DIR)/convert2relative.py $(PLUGIN_DIR)/src --base-name src

move-python-files-to-static:
	mv $(PLUGIN_DIR)/src $(PLUGIN_DIR)/static/py
	$(REPLACE_SRC_BY_PYTHON_LOCATION) $(PLUGIN_DIR)/ui.py \
	                                  $(PLUGIN_DIR)/main.py

copy-python-files:
	$(PYTHON) $(BIN_DIR)/gather-python-files.py $(CODE_DIR) $(PLUGIN_DIR)

clean-build: clean-plugin clean-links clean-build-dir

clean-build-dir:
	rm -rf $(BUILD_DIR)

clean-plugin:
	rm -rf $(PLUGIN_DIR) $(PLUGIN_DIR).plugin

build-front-end: $(PACKAGE.JSON) build-dir
	$(YARN) build && \
	mv $(WEB_DIR)/dist $(PLUGIN_DIR)

build-dir:
	$(MKDIR) $(BUILD_DIR)

auxillary-files:
	cp $(INFO.XML) $(PLUGIN_DIR)

init: initialize-python-environment dependencies init-workflow package.json

init-workflow: autogenerated-constants links generate-workflow-files

links: clean-links create-workflow-dir
	ln -sf $(CODE_DIR)/depricated/APS_make_gauss_IPL.py $(BIN_DIR)
	ln -sf $(CODE_DIR)/depricated/APSGaussFieldJobs.py $(SOURCE_DIR)/algorithms
	ln -sf $(CODE_DIR)/depricated/APSupdateVarioAsimuth.py $(SOURCE_DIR)/utils
	ln -sf $(CODE_DIR)/depricated/getRMSProjectData.py $(SOURCE_DIR)/utils/roxar
	ln -sf $(CODE_DIR)/depricated/DefineTruncStructure.py $(CODE_DIR)/examples
	ln -sf $(CODE_DIR)/depricated/to_be_deleted/APS_simulate_gauss_multiprocessing.ipl $(CODE_DIR)/workflow
	ln -sf $(CODE_DIR)/depricated/to_be_deleted/Cleanup_tmpdir.ipl $(CODE_DIR)/workflow
	ln -sf $(CODE_DIR)/workflow/APS_simulate_gauss_multiprocessing.py $(BIN_DIR)
	ln -sf $(CODE_DIR)/workflow/APS_simulate_gauss_singleprocessing.py $(BIN_DIR)
	ln -sf $(CODE_DIR)/src/utils/ConvertBitMapToRMS.py $(CODE_DIR)/workflow
	ln -sf $(CODE_DIR)/src/rms_jobs/bitmap2rms_facies_code.py $(BIN_DIR)/bitmap2rms_xml.py
	# Matplotlibrc (Force use of Agg in tests)
	ln -sf $(CODE_DIR)/.matplotlibrc $(TEST_FOLDER)/matplotlibrc
	ln -sf $(CODE_DIR)/.matplotlibrc $(INTEGRATION_TESTS)/matplotlibrc

create-workflow-dir:
	$(MKDIR) $(CODE_DIR)/workflow

clean-links:
	rm -f $(BIN_DIR)/APS_make_gauss_IPL.py
	rm -f $(SOURCE_DIR)/algorithms/APSGaussFieldJobs.py
	rm -f $(SOURCE_DIR)/utils/APSupdateVarioAsimuth.py
	rm -f $(SOURCE_DIR)/utils/roxar/getRMSProjectData.py
	rm -f $(CODE_DIR)/examples/DefineTruncStructure.py
	rm -f $(CODE_DIR)/workflow/APS_simulate_gauss_multiprocessing.ipl
	rm -f $(CODE_DIR)/workflow/Cleanup_tmpdir.ipl
	rm -f $(BIN_DIR)/APS_simulate_gauss_multiprocessing.py
	rm -f $(BIN_DIR)/APS_simulate_gauss_singleprocessing.py
	rm -f $(CODE_DIR)/workflow/ConvertBitMapToRMS.py
	rm -f $(BIN_DIR)/bitmap2rms_xml.py
	rm -f $(TEST_FOLDER)/matplotlibrc
	rm -f $(INTEGRATION_TESTS)/matplotlibrc

generate-workflow-files: create-workflow-dir
	$(PYTHON) $(BIN_DIR)/generate_workflow_blocks.py $(CODE_DIR) $(WORKFLOWS_TO_PROJECT)

dependencies: libdraw2D.so nrlib requirements $(TEST_NRLIB) apsw

nrlib: $(NRLIB)

install-nrlib: build-nrlib
	cd $(CODE_DIR) && \
	$(PIPENV) install $(NRLIB_PATH)

build-nrlib: get-nrlib
	cd $(NRLIB_PATH) && \
	CODE_DIR=$(NRLIB_PATH) \
	make build-boost-python

test-nrlib:
	$(PY.TEST) $(NRLIB_PATH)/tests

get-nrlib:
	$(MKDIR) $(NRLIB_PATH)
	curl https://git.equinor.com/sdp/nrlib/repository/v$(NRLIB_VERSION)/archive.tar.gz \
	     --output nrlib-$(NRLIB_VERSION).tar.gz \
	     --silent
	$(TAR_EXCRACT) nrlib-$(NRLIB_VERSION).tar.gz -C $(NRLIB_PATH) --strip-components=1
	rm nrlib-$(NRLIB_VERSION).tar.gz

initialize-python-environment: install-pipenv
	cd $(CODE_DIR) && \
	{ $(PIPENV) --venv || $(PIPENV) --python=$(PYTHON) --site-packages ; }

install-pipenv:
	type $(PIPENV) >/dev/null || { $(PIP) install $(USER_INSTALL_PIPENV) pipenv ; }

requirements:
	cd $(CODE_DIR) && \
	$(PIPENV) install --dev

apsw: $(APSW)

install-apsw: compile-apsw library-directory
	$(shell mv `find $(APSW_DIR) -name apsw*.so` $(LIB_DIR)/apsw.so)

compile-apsw: get-apsw
	# TODO?: Add $(APSW_DEBUG) again?
	cd $(APSW_DIR) && \
	CFLAGS="-std=c11" \
	$(PYTHON) setup.py $(FETCH_SQLITE) \
                       build --enable-all-extensions \
                       build_ext --force --inplace \
                       test

get-apsw: remove-nrlib-source
	$(MKDIR) $(APSW_DIR) && \
	wget https://github.com/rogerbinns/apsw/archive/$(APSW_VERSION).tar.gz --output-document=$(LIB_PREFIX)/apsw-$(APSW_VERSION).tar.gz && \
	$(TAR_EXCRACT) $(LIB_PREFIX)/apsw-$(APSW_VERSION).tar.gz -C $(APSW_DIR) --strip-components=1 && \
	rm -f $(LIB_PREFIX)/apsw-$(APSW_VERSION).tar.gz

# Build libgaussField
libdraw2D.so: autogenerated-constants library-directory
	cd $(LIBGAUSS_FIELD_PATH) && \
	CODE_DIR=$(LIBGAUSS_FIELD_PATH) \
	  make build && \
	  mv $(LIBGAUSS_FIELD_PATH)/libdraw2D.so $(LIB_DIR)

library-directory:
	$(MKDIR) $(LIB_DIR)

autogenerated-constants:
	echo "$$AUTOGENERATED_CONSTANTS" > $(PYTHON_LIBRARY_CONSTANT)

clean-autogrenerated:
	rm -f $(PYTHON_LIBRARY_CONSTANT)

clean: clean-autogrenerated clean-links clean-workflow-blocks
	rm -rf $(BUILD_DIR)
	rm -f $(LIBGAUSS_FIELD_PATH)/*.o
	rm -f  $(EXEC_NAME).spec
	rm -f $(CODE_DIR)/build.txt

clean-workflow-blocks:
	rm -rf $(CODE_DIR)/workflow

clean-app:
	rm -rf $(EXEC_NAME)

clean-all: clean clean-tests clean-cache clean-nrlib

clean-nrlib: uninstall-nrlib remove-nrlib-source

remove-nrlib-source:
	rm -rf $(NRLIB_PATH)
	rm -f nrlib-$(NRLIB_VERSION).tar.gz

uninstall-nrlib:
	$(PIPENV) uninstall nrlib || echo "NRlib not installed"

clean-cache: clean-__pycache__ clean-pyc

clean-__pycache__:
	rm -rf $(shell find $(SOURCE_DIR) -name __pycache__)

clean-pyc:
	rm -f $(shell find $(SOURCE_DIR) -name *.pyc)

docker-image: $(GET_RMS_RESOURCES)
	docker build --rm --pull --tag $(DOCKER_IMAGE) --file $(DOCKERFILE) $(CODE_DIR)

docker-login:
	docker login $(DOCKER_REGISTRY_SERVER)
	# TODO: Add new user / bot to gitlab

docker-push-image: docker-image
	docker push $(DOCKER_IMAGE)

copy-source:
	cd $(CODE_DIR)
	$(TAR) --exclude-vcs-ignore \
	    -cvzf code.tar.gz .

docker-bash:
	docker run --rm -it -v $(CODE_DIR):/code --workdir=/code $(DOCKER_IMAGE) bash

check-requirements:
	$(PIPENV) lock --dev --requirements | $(PIPROT) --outdated -

check-node-dependencies:
	$(YARN) outdated

safety-check:
	$(PIPENV) check

integration-tests: clean-integration init-workflow link-example-files
	cd $(INTEGRATION_TESTS) && \
	RMS_PROJECT="$(RMS_PROJECT)" \
	APS_RESOURCES="$(INTEGRATION_TESTS)" \
	./test_workflows_in_rms11.sh

clean-integration: clean-workflow-blocks clean-example-link
	cd $(INTEGRATION_TESTS) && \
	rm -f examples \
	      matplotlibrc && \
	rm -f *.log \
	      *.html \
	      *.xml \
	      *.irap \
	      *.dat

link-example-files: clean-example-link
	ln -s $(EXAMPLES_FOLDER) $(INTEGRATION_TESTS)/examples

clean-example-link:
	rm -f $(INTEGRATION_TESTS)/examples

unit-tests: clean-tests run-tests clean-tests

run-tests: links
	cd $(TEST_FOLDER) && \
	$(PY.TEST) --basetemp=$(TEST_FOLDER)

clean-tests: clean-integration
	cd $(TEST_FOLDER) && \
	rm -rf .cache && \
	rm -f  *.dat \
	       *.xml \
	       *.png \
	       fmu_attributes.txt \
	       libdraw2D.so

# TODO: Add diagrams for Previewer, and other files / classes of interest
uml-diagrams: uml-main-program

uml-main-program:
	cd $(CODE_DIR) && \
	$(PYREVERSE) -ASmy -k -o png $(ENTRY_POINT) -p APS-GUI

linting: run-python-linting javascript-linting

python-linting: clean-links run-python-linting links

run-python-linting:
	$(PYLINT) --jobs=$(NUMBER_OF_PROCESSORS) $(SOURCE_DIR) $(CODE_DIR)/depricated $(BIN_DIR)

javascript-linting:
	$(YARN) lint

web-start: $(PACKAGE.JSON)
	$(YARN) serve:gui --port=$(VUE_APP_APS_GUI_PORT) \
	                  --host=$(VUE_APP_APS_SERVER)

web-e2e:
	$(YARN) test:e2e

web-test:
	$(YARN) test:unit

web-lint:
	$(YARN) lint

web-build:
	$(YARN) build

web-install-dev: $(PACKAGE.JSON)

package.json:
	$(YARN) install --dev


run-rms.uipy-mock:
	FLASK_APP=$(SOURCE_DIR)/api/app.py \
	FLASK_ENV=development \
	APS_MODE='develop' \
	$(FLASK) run --port=$(VUE_APP_APS_API_PORT) \
	             --host=$(VUE_APP_APS_SERVER)

# TODO: Add versioning to the plugin file
deploy:
	cd $(CODE_DIR) && \
	for server in $(SERVERS); do \
	    echo scp $(PLUGIN_BIN) $(DEPLOYMENT_USER)@$$server:$(DEPLOYMENT_PATH)/$(PLUGIN_PREFIX)-$(PLUGIN_BIN); \
	done


# Getting RMS 11,
get-rms-repo:
	git clone git@git.equinor.com:APS/RMS.git $(RMS_DIR) || git -C $(RMS_DIR) pull

rms-bundle: get-rms-repo
	cd $(RMS_DIR) && \
	CODE_DIR=$(RMS_DIR) \
	make -f $(RMS_DIR)/Makefile rms-bundle \
	                            auxillary-bundle \
	                            project-bundle


print-%  : ; @echo $($*)

PROJECT_NAME ?= aps-gui
SHELL := /bin/bash
LOG_DIR = logs
# Valid options: TRACE, DEBUG, INFO (default), WARN, ERROR, CRITICAL
LOG_LEVEL = INFO
EXEC_NAME = app
MAIN_FILE = app.py
ifeq ($(CODE_DIR),)
CODE_DIR := $(shell pwd)
endif
ifeq ($(PYTHONPATH),)
PYTHONPATH := $(CODE_DIR)
endif
SOURCE_DIR = $(CODE_DIR)/src
BUILD_DIR = $(CODE_DIR)/build
LIB_PREFIX = $(CODE_DIR)/libraries
EXAMPLES_FOLDER = $(CODE_DIR)/examples
ENTRY_POINT = $(SOURCE_DIR)/gui/$(MAIN_FILE)
TEST_FOLDER = $(SOURCE_DIR)/unit_test
AUXILLARY = $(CODE_DIR)/auxillary
VULNERABILITY_DB = $(AUXILLARY)/vulnerability/data
PYTHON_LIBRARY_CONSTANT = $(SOURCE_DIR)/utils/constants/autogenerated.py
DOCKERFILE = Dockerfile
DOCKER_REGISTRY_SERVER = git.statoil.no:4567
DOCKER_REGISTRY = $(DOCKER_REGISTRY_SERVER)/aps/gui
# Paths local to the compiled app
APP_EXAMPLES = ./examples
APP_LIBRARY = .
PYTHON ?= $(shell which python)
ifeq ($(PIP),)
PIP := $(PYTHON) -m pip
endif
PYTHON_PREFIX := $(shell dirname $(PYTHON))/..
ifeq ($(IMAGE_VERSION),)
IMAGE_VERSION := $(shell ./bin/find-version-of-docker-image.sh $(CODE_DIR))
endif
ifeq ($(IMAGE_NAME),)
IMAGE_NAME := $(PROJECT_NAME):$(IMAGE_VERSION)
endif
ifeq ($(LIB_GL),)
LIB_GL := $(shell echo "$(shell ldconfig -p | grep libGL.so.1 | tr ' ' '\n' | grep /)")
endif

# NRlib
BUILD_NRLIB ?= no
ifeq ($(BUILD_NRLIB),yes)
NRLIB := get-nrlib install-nrlib
else
NRLIB :=
endif
NRLIB_URL_HTTPS := https://gitlab-ci-token:$(CI_BUILD_TOKEN)@git.statoil.no/SDP/nrlib.git
NRLIB_URL_SSH := git@git.statoil.no:SDP/nrlib.git
NRLIB_PATH := $(LIB_PREFIX)/nrlib
NRLIB_VERSION ?= 1.0.1

# APSW (Another Python SQLite Wrapper)
BUILD_ASPW ?= no
ifeq ($(BUILD_APSW),yes)
APWS := get-apsw install-apsw
else
APWS :=
endif
APSW := get
APSW_VERSION := 3.21.0-r1
APSW_DIR := $(LIB_PREFIX)/build/apsw-$(APSW_VERSION)

define AUTOGENERATED_CONSTANTS
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This file is automatically created from make (make empty-constants)
"""

# --Values--
LATEST_COMMIT_HASH = '$(shell git rev-parse --short HEAD)'
LATEST_VERSION = '$(shell git describe --all | grep -E v[0-9]+\.[0-9]+\.[0-9]+ | tr -d 'v')'
BUILD_NUMBER = '$(shell git rev-list --count HEAD 2>/dev/null || git rev-list --all | wc -l)'
BRANCH_NAME = '$(shell git rev-parse --abbrev-ref HEAD)'

# --Paths--
# Local to the machine
LIBRARY_FOLDER = '$(LIB_PREFIX)'
EXAMPLE_FOLDER = '$(EXAMPLES_FOLDER)'
# In the compiled app
LIBRARY_FOLDER_APP = '$(APP_LIBRARY)'
EXAMPLE_FOLDER_APP = '$(APP_EXAMPLES)'
endef
export AUTOGENERATED_CONSTANTS

COLOR = \033[32;01m
NO_COLOR = \033[0m
.PHONY: help run

# Build / clean / run
build: clean-all

init: dependencies autogenerated-constants

dependencies: libdraw2D.so requirements nrlib

nrlib: $(NRLIB)

install-nrlib: clean-nrlib
	cd $(NRLIB_PATH) && \
	CODE_DIR=$(NRLIB_PATH) \
	make build && \
	make install && \
	make tests

get-nrlib:
	mkdir -p $(NRLIB_PATH)
	wget https://git.statoil.no/sdp/nrlib/repository/v$(NRLIB_VERSION)/archive.tar.gz
	tar -xvf archive.tar.gz -C $(NRLIB_PATH) --strip-components=1
	rm archive.tar.gz

requirements:
	$(PIP) install -r $(CODE_DIR)/requirements.txt

apsw: $(APSW)

install-apsw:
	cd $(APSW_DIR) && \
	$(PYTHON) setup.py fetch && \
	$(PYTHON) setup.py build --enable-all-extensions && \
	$(PYTHON) setup.py install && \
	$(PYTHON) setup.py test && \
	rm -rf $(APSW_DIR)

get-apsw:
	mkdir -p $(APSW_DIR) $(LIB_PREFIX)/source && \
	wget https://github.com/rogerbinns/apsw/archive/$(APSW_VERSION).tar.gz --output-document=$(LIB_PREFIX)/source/apsw-$(APSW_VERSION).tar.gz && \
	tar -xvf $(LIB_PREFIX)/source/apsw-$(APSW_VERSION).tar.gz -C $(APSW_DIR) --strip-components=1 && \
	rm -f $(LIB_PREFIX)/source/apsw-$(APSW_VERSION).tar.gz

# Build libgaussField
libdraw2D.so: autogenerated-constants
	cd $(LIB_PREFIX) && \
	./buildSharedLib.sh -O3

autogenerated-constants:
	echo "$$AUTOGENERATED_CONSTANTS" > $(PYTHON_LIBRARY_CONSTANT)

clean-autogrenerated:
	rm -f $(PYTHON_LIBRARY_CONSTANT)

clean: clean-autogrenerated
	rm -rf $(BUILD_DIR)
	rm -rf $(LIB_PREFIX)/libgaussField/build
	rm -f  $(EXEC_NAME).spec
	rm -f $(CODE_DIR)/build.txt

clean-app:
	rm -rf $(EXEC_NAME)

clean-all: clean clean-safety clean-tests clean-cache clean-nrlib

clean-nrlib:
	$(PIP) uninstall --yes nrlib || echo "NRlib has not been installed"
	rm -rf $(NRLIB_PATH)
	rm -f archive.tar.gz

clean-cache: clean-__pycache__ clean-pyc

clean-__pycache__:
	rm -rf $(shell find $(SOURCE_DIR) -name __pycache__)

clean-pyc:
	rm -f $(shell find $(SOURCE_DIR) -name *.pyc)

docker-image:
	docker build --rm --pull --tag $(DOCKER_REGISTRY)/$(IMAGE_NAME) --file $(DOCKERFILE) $(CODE_DIR)

docker-login:
	docker login $(DOCKER_REGISTRY_SERVER)
	# TODO: Add new user / bot to gitlab

docker-push-image: docker-image
	docker push $(DOCKER_REGISTRY)/$(IMAGE_NAME)

copy-source:
	tar --exclude='$(CODE_DIR)/.git/' --exclude="$(CODE_DIR)/documentation" -cvzf code.tar.gz *

check-requirements:
	piprot --outdated $(CODE_DIR)/requirements.txt

safety-check: clean-safety get-vulnerability-db
	safety check --full-report --db $(VULNERABILITY_DB)

get-vulnerability-db:
	mkdir -p $(VULNERABILITY_DB) && \
    for file in 'insecure.json' 'insecure_full.json' ; do \
        curl --proxy $(HTTP_PROXY) \
             --output $(VULNERABILITY_DB)/$$file \
             https://raw.githubusercontent.com/pyupio/safety-db/master/data/$$file; \
    done

clean-safety:
	rm -rf $(VULNERABILITY_DB)

unit-tests: copy-libdraw-to-test run-tests clean-tests

copy-libdraw-to-test: libdraw2D.so

run-tests:
	cd $(TEST_FOLDER) && \
	pytest --basetemp=$(TEST_FOLDER)

clean-tests:
	rm -rf $(TEST_FOLDER)/.cache && \
	rm -f  $(TEST_FOLDER)/*.dat  && \
	rm -f  $(TEST_FOLDER)/*.xml && \
	rm -f  $(TEST_FOLDER)/libdraw2D.so

# TODO: Add diagrams for Previewer, and other files / classes of interest
uml-diagrams:
	cd $(CODE_DIR) && \
	pyreverse -ASmy -k -o png $(ENTRY_POINT) -p APS-GUI

linting:
	pylint $(SOURCE_DIR)

print-%  : ; @echo $($*)

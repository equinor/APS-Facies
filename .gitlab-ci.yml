variables:
  GIT_STRATEGY: "fetch"
  HTTP_PROXY:   "http://www-proxy.statoil.no:80"
  HTTPS_PROXY:  "http://www-proxy.statoil.no:80"
  FTP_PROXY:    "http://www-proxy.statoil.no:80"
  NO_PROXY:     "git.statoil.no"
  CODE_DIR:     "/code"
  ARTIFACTS:    "artifacts"
  IMAGE_NAME:   "aps-gui:1.7.1"  # May be removed when using the latest version
  DOCKER:       "docker run -v $CI_PROJECT_DIR:$CODE_DIR -i $IMAGE_NAME"
  DOCKER_BIN:   "docker run -v $CI_PROJECT_DIR:$CODE_DIR -v $CI_PROJECT_DIR/$ARTIFACTS:/$ARTIFACTS -i $IMAGE_NAME"
  MAKE:         "make --makefile=$CODE_DIR/Makefile"
  RUN:          "/bin/bash -c"
  GUI_FILE:     "app"


stages:
  - build docker image
  - testing
  - doc-tests  # https://docs.python.org/3/library/doctest.html
  - build gui
  - test gui
  - generate documentation
  - deploy
  - clean docker

make documentation:
  stage: generate documentation
  script:  # https://www.logilab.org/blogentry/6883
    - 'eval $DOCKER $MAKE uml-diagrams'
    - 'eval mkdir -p $CI_PROJECT_DIR/uml-diagrams'
    - 'eval mv $CI_PROJECT_DIR/classes_APS-GUI.png $CI_PROJECT_DIR/uml-diagrams'
  artifacts:
    expire_in: 1 week
    paths:
      - uml-diagrams/


check for vulnerabilities:
  stage: testing
  script:
    - 'eval $DOCKER $MAKE safety-check'

linting:
  stage: testing
  script:
    - 'eval $DOCKER $MAKE linting'
  allow_failure: true

unit testing:
  stage: testing  # https://github.com/ksator/continuous-integration-with-python
  script:
    - 'eval $DOCKER $MAKE unit-tests'

build GUI:
  stage: build gui
  script:
    - 'eval mkdir -p $CI_PROJECT_DIR/$ARTIFACTS'
    - 'eval $DOCKER $MAKE build'
    - 'eval mv $CI_PROJECT_DIR/$GUI_FILE $CI_PROJECT_DIR/$ARTIFACTS'
    - 'eval du -sh $CI_PROJECT_DIR/$ARTIFACTS'
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts/

start GUI:
  stage: test gui
  script:
    - 'eval $DOCKER_BIN /$ARTIFACTS/$GUI_FILE --help'
#    - 'eval $CI_PROJECT_DIR/$ARTIFACTS/$GUI_FILE --version'
  dependencies:
    - build GUI

build docker image:
  stage: build docker image
  script:
    - make docker-image
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - ""  # TODO
  only:
   - master

clean docker:
  stage: clean docker
  script:
    - 'eval docker rmi $(docker images -f dangling=true -q) || echo "No dangling images to delete."'
    - 'eval docker rm $(docker ps -aq) || echo "No images to be deleted"'
  allow_failure: true

#cache:
#  paths:
#    - gcc-*
#    - qt-*
